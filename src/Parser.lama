-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun constractBinop (l, op, r) {
  Binop(op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Left, {[s ("!!"), constractBinop]}],
        [Left, {[s ("&&"), constractBinop]}],
        [Nona, {
          [s ("<"), constractBinop], 
          [s (">"), constractBinop], 
          [s ("<="), constractBinop], 
          [s (">="), constractBinop], 
          [s ("=="), constractBinop], 
          [s ("!="), constractBinop]
        }],
        [Left, {[s ("+"), constractBinop], [s ("-"), constractBinop]}],
        [Left, {
          [s ("*"), constractBinop], 
          [s ("/"), constractBinop], 
          [s ("%"), constractBinop]
        }]
      }, primary);

var stmt = memo $ eta syntax (
  varName=lident s[":="] value=exp      { Assn (varName, value) } |
  kSkip                                 { Skip }                  |
  kRead x=inbr[s("("), lident, s(")")]  { Read (x) }              |
  kWrite e=inbr[s("("), exp, s(")")]    { Write (e) }
);

var program = memo $ eta syntax (
  stmt | stmt1=stmt s[";"] stmt2=program { Seq (stmt1, stmt2) }
);

-- Public top-level parser
public parse = program;
             
