-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun constructBinop (l, op, r) {
  Binop(op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ eta expr ({
        [Left, {[s ("!!"), constructBinop]}],
        [Left, {[s ("&&"), constructBinop]}],
        [Nona, {
          [s ("<"), constructBinop], 
          [s (">"), constructBinop], 
          [s ("<="), constructBinop], 
          [s (">="), constructBinop], 
          [s ("=="), constructBinop], 
          [s ("!="), constructBinop]
        }],
        [Left, {[s ("+"), constructBinop], [s ("-"), constructBinop]}],
        [Left, {
          [s ("*"), constructBinop], 
          [s ("/"), constructBinop], 
          [s ("%"), constructBinop]
        }]
      }, primary);

var ifClauses = memo $ eta syntax (
  kFi                                              { Skip }                  |
  kElse s=program kFi                              { s }                     |
  kElif cond=exp kThen s=program clauses=ifClauses { If (cond, s, clauses) } 
);

var stmt = memo $ eta syntax (
  varName=lident s[":="] value=exp                            { Assn (varName, value) }             |
  kSkip                                                       { Skip }                              |
  kRead x=inbr[s("("), lident, s(")")]                        { Read (x) }                          |
  kWrite e=inbr[s("("), exp, s(")")]                          { Write (e) }                         |
  kIf cond=exp kThen s=program clauses=ifClauses              { If (cond, s, clauses) }             |
  kWhile cond=exp kDo body=program kOd                        { While (cond, body) }                |
  kDo body=program kWhile cond=exp kOd                        { DoWhile (body, cond) }              |
  kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=program kOd { Seq (s1, While (e, Seq (s3, s2))) }
);

var program = memo $ eta syntax (
  stmt | stmt1=stmt s[";"] stmt2=program { Seq (stmt1, stmt2) }
);

-- Public top-level parser
public parse = program;   
