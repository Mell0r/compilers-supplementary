-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (value) -> [c, Val (value)]
  | Var (varName) -> [c, Val (s(varName))]
  | Ref (varName) -> [c, Ref (varName)]
  | Binop (op, argL, argR) -> case evalList (c, { argL, argR }) of
      [c, { Val (l), Val (r) }] -> [c, Val (evalOp(op, l, r))]
    esac
  | Skip -> [c, Void]
  | Assn (argL, argR) -> case evalList (c, { argL, argR }) of
      [[s, w], { Ref (varName), Val (value) }] -> [[s <- [varName, value], w], Val (value)]
    esac
  | Read (destName) -> case readWorld(w) of 
      [value, wNew] -> [[s <- [destName, value], wNew], Void] 
    esac
  | Write (expr) -> case eval(c, expr) of
      [[sNew, wNew], Val (value)] -> [[sNew, writeWorld(value, wNew)], Void]
    esac
  | Seq (expr1, expr2) -> case eval(c, expr1) of
      [cNew, _] -> eval(cNew, expr2)
    esac
  | If (cond, tBranch, fBranch) -> case eval (c, cond) of
      [cNew, Val (0)] -> eval(cNew, fBranch)
    | [cNew, Val (_)] -> eval(cNew, tBranch)
    esac
  | While (cond, body) -> case eval(c, cond) of
      [cNew, Val (0)] -> [cNew, Void]
    | [cNew, Val (_)] -> case eval(cNew, body) of
        [cNewNew, _] -> eval(cNewNew, expr)
      esac
    esac
  | DoWhile (body, cond) -> case eval(c, body) of
      [cNew, _] -> eval(cNew, While (cond, body))
    esac
  | Ignore (expr) -> case eval(c, expr) of
      [cNew, _] -> [cNew, Void]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
